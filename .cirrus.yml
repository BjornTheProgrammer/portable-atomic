only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'main' || $CIRRUS_BRANCH == 'dev')
auto_cancellation: $CIRRUS_PR != ''
env:
  CARGO_INCREMENTAL: '0'
  CARGO_NET_RETRY: '10'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'
  RUST_TEST_THREADS: '1'
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: '10'

aarch64_linux_dynamic_linking_test_task:
  matrix:
    - name: test ($TARGET)
      env:
        TARGET: aarch64-unknown-linux-gnu
      arm_container:
        image: rust
      setup_script:
        - set -ex
        - lscpu
        - rustup toolchain add nightly --no-self-update && rustup default nightly
        - apt-get -o Acquire::Retries=10 -qq update && apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
    - name: test ($TARGET, glibc 2.17)
      env:
        TARGET: aarch64-unknown-linux-gnu
      arm_container:
        # glibc 2.17 is the minimum glibc version that aarch64 support is available: https://sourceware.org/legacy-ml/libc-announce/2012/msg00001.html
        image: centos:7
      setup_script:
        - set -ex
        - lscpu
        - yum install -y gcc moreutils
        - curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly
    - name: test ($TARGET, -C target-feature=-crt-static)
      env:
        TARGET: aarch64-unknown-linux-musl
        RUSTDOCFLAGS: -D warnings -C target-feature=-crt-static
        RUSTFLAGS: -D warnings -C target-feature=-crt-static
      arm_container:
        image: rust:alpine
      setup_script:
        - set -ex
        - apk --no-cache add bash musl-dev util-linux moreutils
        - lscpu
        - rustup toolchain add nightly --no-self-update && rustup default nightly
  test_script:
    - |
      [ ! -f $HOME/.cargo/env ] || . $HOME/.cargo/env
    - set -ex
    - ./tools/test.sh -vv
    # We test doctest only once with the default build conditions because doctest is slow. Both api-test
    # and src/tests have extended copies of doctest, so this will not reduce test coverage.
    # outline-atomics is enabled by default on linux-gnu and linux-musl with dynamic linking.
    - RUSTFLAGS="$RUSTFLAGS --cfg portable_atomic_no_outline_atomics" RUSTDOCFLAGS="$RUSTDOCFLAGS --cfg portable_atomic_no_outline_atomics" ./tools/test.sh -vv --tests
    # +lse
    # Neoverse N1 is ARMv8.2-a and doesn't support FEAT_LSE2.
    # FEAT_LSE2 is tested on aarch64 macOS VM.
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" ./tools/test.sh -vv --tests

aarch64_linux_static_linking_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-unknown-linux-musl
  arm_container:
    image: rust:alpine
  setup_script:
    - set -ex
    - apk --no-cache add bash musl-dev util-linux moreutils
    - lscpu
    - rustup toolchain add nightly --no-self-update && rustup default nightly
  test_script:
    - set -ex
    - ./tools/test.sh -vv
    # We test doctest only once with the default build conditions because doctest is slow. Both api-test
    # and src/tests have extended copies of doctest, so this will not reduce test coverage.
    # outline-atomics is disabled by default on linux-musl with static linking.
    - RUSTFLAGS="$RUSTFLAGS --cfg portable_atomic_outline_atomics" RUSTDOCFLAGS="$RUSTDOCFLAGS --cfg portable_atomic_outline_atomics" ./tools/test.sh -vv --tests
    # +lse
    # Neoverse N1 is ARMv8.2-a and doesn't support FEAT_LSE2.
    # FEAT_LSE2 is tested on aarch64 macOS VM.
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" ./tools/test.sh -vv --tests

aarch64_macos_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-apple-darwin
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-xcode
  setup_script:
    - set -ex
    - sysctl hw.optional machdep.cpu
    - brew install moreutils
    - curl --proto '=https' --tlsv1.2 -fsSL --retry 10 --retry-connrefused https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly
  test_script:
    - . $HOME/.cargo/env
    - set -ex
    # macOS is +lse,+lse2 by default
    - ./tools/test.sh -vv

aarch64_linux_valgrind_task:
  name: valgrind ($TARGET)
  env:
    TARGET: aarch64-unknown-linux-gnu
  arm_container:
    image: rust
  setup_script:
    - set -ex
    - rustup toolchain add nightly --no-self-update && rustup default nightly
    - apt-get -o Acquire::Retries=10 -qq update && apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils valgrind
  test_script:
    - set -ex
    - ./tools/test.sh valgrind -vv
    # outline-atomics is enabled by default on linux-gnu and linux-musl with dynamic linking.
    - RUSTFLAGS="$RUSTFLAGS --cfg portable_atomic_no_outline_atomics" RUSTDOCFLAGS="$RUSTDOCFLAGS --cfg portable_atomic_no_outline_atomics" ./tools/test.sh valgrind -vv
    # +lse
    # As of Valgrind 3.19, Valgrind supports atomic instructions of ARMv8.0 and ARMv8.1 (FEAT_LSE).
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" ./tools/test.sh valgrind -vv
#
# aarch64_linux_bench_task:
#   name: bench ($TARGET)
#   env:
#     TARGET: aarch64-unknown-linux-gnu
#   arm_container:
#     image: rust
#     cpu: 4
#     memory: 12G
#   setup_script:
#     - set -ex
#     - lscpu
#     - rustup toolchain add nightly --no-self-update && rustup default nightly
#   bench_script:
#     - set -ex
#     - cargo bench -vv --manifest-path bench/Cargo.toml
#     - RUSTFLAGS="${RUSTFLAGS} -C target-feature=-outline-atomics --cfg portable_atomic_no_outline_atomics" cargo bench -vv --manifest-path bench/Cargo.toml
#     - RUSTFLAGS="${RUSTFLAGS} -C target-feature=+lse" cargo bench -vv --manifest-path bench/Cargo.toml

# x86_64_linux_bench_task:
#   name: bench ($TARGET)
#   env:
#     TARGET: x86_64-unknown-linux-gnu
#   container:
#     image: rust
#     cpu: 4
#     memory: 12G
#   setup_script:
#     - set -ex
#     - lscpu
#     - rustup toolchain add nightly --no-self-update && rustup default nightly
#   bench_script:
#     - set -ex
#     - cargo bench -vv --manifest-path bench/Cargo.toml
#     - RUSTFLAGS="${RUSTFLAGS} -C target-feature=+cmpxchg16b" cargo bench -vv --manifest-path bench/Cargo.toml

# aarch64_macos_bench_task:
#   name: bench ($TARGET)
#   env:
#     TARGET: aarch64-apple-darwin
#   macos_instance:
#     image: ghcr.io/cirruslabs/macos-ventura-xcode
#   setup_script:
#     - set -ex
#     - sysctl hw.optional machdep.cpu
#     - curl --proto '=https' --tlsv1.2 -fsSL --retry 10 --retry-connrefused https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly
#   bench_script:
#     - . $HOME/.cargo/env
#     - set -ex
#     - cargo bench -vv --manifest-path bench/Cargo.toml
