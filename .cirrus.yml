only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'main' || $CIRRUS_BRANCH == 'dev' || $CIRRUS_BRANCH == 'staging')
auto_cancellation: $CIRRUS_BRANCH != 'main'
env:
  CARGO_INCREMENTAL: '0'
  CARGO_NET_GIT_FETCH_WITH_CLI: 'true'
  CARGO_NET_RETRY: '10'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'
  RUST_TEST_THREADS: '1'
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: '10'
  EXCLUDE: --exclude bench --exclude portable-atomic-internal-codegen

aarch64_linux_test_task:
  name: test ($TARGET)
  matrix:
    - env:
        TARGET: aarch64-unknown-linux-gnu
      arm_container:
        image: rust:latest
      setup_script:
        - set -ex
        - lscpu
        - rustup toolchain add nightly --no-self-update --component rust-src && rustup default nightly
    - env:
        TARGET: aarch64-unknown-linux-musl
      arm_container:
        image: rust:alpine
      setup_script:
        - set -ex
        - apk --no-cache add git musl-dev util-linux
        - lscpu
        - rustup toolchain add nightly --no-self-update --component rust-src && rustup default nightly
  test_script:
    - set -ex
    - cargo test -vv --workspace --all-features           $EXCLUDE
    - cargo test -vv --workspace --all-features --release $EXCLUDE
    - CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 CARGO_PROFILE_RELEASE_LTO=fat cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    # +lse
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" cargo test -vv --workspace --all-features           $EXCLUDE
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" cargo test -vv --workspace --all-features --release $EXCLUDE
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 CARGO_PROFILE_RELEASE_LTO=fat cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    # TODO: FEAT_LSE2 is not available on Graviton2 (armv8.2-a)

aarch64_macos_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-apple-darwin
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-xcode:latest
  setup_script:
    - set -ex
    - sysctl hw.optional machdep.cpu
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --component rust-src
  test_script:
    - set -ex
    - source $HOME/.cargo/env
    - cargo test -vv --workspace --all-features $EXCLUDE
    - cargo test -vv --workspace --all-features --release $EXCLUDE
    - CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 CARGO_PROFILE_RELEASE_LTO=fat cargo test -vv --workspace --all-features --release --tests $EXCLUDE

aarch64_linux_valgrind_task:
  name: valgrind ($TARGET)
  env:
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    RUSTDOCFLAGS: -D warnings --cfg valgrind
    RUSTFLAGS: -D warnings --cfg valgrind
    TARGET: aarch64-unknown-linux-gnu
  arm_container:
    # Valgrind support ldxp/stxp on 3.19+: https://valgrind.org/docs/manual/dist.news.html
    # However, current Debian stable's Valgrind is 3.16: https://packages.debian.org/en/stable/valgrind
    image: debian:bookworm
  setup_script:
    - set -ex
    - lscpu
    - apt-get -o Acquire::Retries=10 -qq update && apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends valgrind ca-certificates curl gcc git libc6-dev
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --component rust-src
  test_script:
    - set -ex
    - source $HOME/.cargo/env
    # doctests on Valgrind are very slow
    - cargo test -vv --workspace --all-features           --tests $EXCLUDE
    - cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    - CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 CARGO_PROFILE_RELEASE_LTO=fat cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    # +lse
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" cargo test -vv --workspace --all-features           --tests $EXCLUDE
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    - RUSTFLAGS="$RUSTFLAGS -C target-feature=+lse" RUSTDOCFLAGS="$RUSTDOCFLAGS -C target-feature=+lse" CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 CARGO_PROFILE_RELEASE_LTO=fat cargo test -vv --workspace --all-features --release --tests $EXCLUDE
    # TODO: FEAT_LSE2 is not available on Graviton2 (armv8.2-a)
#
# aarch64_linux_bench_task:
#   name: bench ($TARGET)
#   env:
#     TARGET: aarch64-unknown-linux-gnu
#   arm_container:
#     image: rust:latest
#     cpu: 4
#     memory: 12G
#   setup_script:
#     - set -ex
#     - lscpu
#     - rustup toolchain add nightly --no-self-update && rustup default nightly
#   bench_script:
#     - set -ex
#     - RUSTFLAGS="${RUSTFLAGS} -C target-feature=-outline-atomics --cfg portable_atomic_no_outline_atomics" cargo bench -vv --manifest-path bench/Cargo.toml
#     - RUSTFLAGS="${RUSTFLAGS} -C target-feature=+lse" cargo bench -vv --manifest-path bench/Cargo.toml

# aarch64_macos_bench_task:
#   name: bench ($TARGET)
#   env:
#     TARGET: aarch64-apple-darwin
#   macos_instance:
#     image: ghcr.io/cirruslabs/macos-ventura-xcode:latest
#   setup_script:
#     - set -ex
#     - sysctl hw.optional machdep.cpu
#     - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --component rust-src
#   bench_script:
#     - set -ex
#     - source $HOME/.cargo/env
#     - cargo bench -vv --manifest-path bench/Cargo.toml
