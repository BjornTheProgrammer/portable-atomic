diff --git a/bminor/glibc/include/sys/auxv.h b/bminor/glibc/include/sys/auxv.h
index dd0602b0..6d083f4b 100644
--- a/bminor/glibc/include/sys/auxv.h
+++ b/bminor/glibc/include/sys/auxv.h
@@ -3,11 +3,11 @@
 #ifndef _ISOMAC

 extern __typeof (getauxval) __getauxval;
-libc_hidden_proto (__getauxval)
+// libc_hidden_proto (__getauxval)

 /* Like getauxval, but writes the value to *RESULT and returns true if
    found, or returns false.  Does not set errno.  */
-_Bool __getauxval2 (unsigned long int type, unsigned long int *result);
-libc_hidden_proto (__getauxval2)
+// _Bool __getauxval2 (unsigned long int type, unsigned long int *result);
+// libc_hidden_proto (__getauxval2)

 #endif  /* !_ISOMAC */
diff --git a/include/sys/cdefs.h b/include/sys/cdefs.h
index 56adb231..da240141 100644
--- a/bminor/glibc/include/sys/cdefs.h
+++ b/bminor/glibc/include/sys/cdefs.h
@@ -17,13 +17,13 @@
 # define __nonnull(params)

 extern void __chk_fail (void) __attribute__ ((__noreturn__));
-libc_hidden_proto (__chk_fail)
-rtld_hidden_proto (__chk_fail)
+// libc_hidden_proto (__chk_fail)
+// rtld_hidden_proto (__chk_fail)

 /* If we are using redirects internally to support long double,
    we need to tweak some macros to ensure the PLT bypass tricks
    continue to work in libc. */
-#if __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI == 1 && IS_IN (libc) && defined SHARED
+#if __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI == 1 && false && defined SHARED

 # undef __LDBL_REDIR_DECL
 # define __LDBL_REDIR_DECL(func) \
